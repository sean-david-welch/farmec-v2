// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: terms.sql

package db

import (
	"context"
	"database/sql"
)

const createTerm = `-- name: CreateTerm :exec
insert into Terms (id, title, body, created)
values (?, ?, ?, ?)
`

type CreateTermParams struct {
	ID      string         `json:"id"`
	Title   string         `json:"title"`
	Body    sql.NullString `json:"body"`
	Created sql.NullString `json:"created"`
}

func (q *Queries) CreateTerm(ctx context.Context, arg CreateTermParams) error {
	_, err := q.db.ExecContext(ctx, createTerm,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.Created,
	)
	return err
}

const deleteTerm = `-- name: DeleteTerm :exec
delete
from Terms
where id = ?
`

func (q *Queries) DeleteTerm(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTerm, id)
	return err
}

const getTermByID = `-- name: GetTermByID :one
select id, title, body, created
from Terms
where id = ?
`

func (q *Queries) GetTermByID(ctx context.Context, id string) (Term, error) {
	row := q.db.QueryRowContext(ctx, getTermByID, id)
	var i Term
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Created,
	)
	return i, err
}

const getTerms = `-- name: GetTerms :many
select id, title, body, created
from Terms
`

func (q *Queries) GetTerms(ctx context.Context) ([]Term, error) {
	rows, err := q.db.QueryContext(ctx, getTerms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Term
	for rows.Next() {
		var i Term
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTerm = `-- name: UpdateTerm :exec
update Terms
set title   = ?,
    body    = ?,
    created = ?
where id = ?
`

type UpdateTermParams struct {
	Title   string         `json:"title"`
	Body    sql.NullString `json:"body"`
	Created sql.NullString `json:"created"`
	ID      string         `json:"id"`
}

func (q *Queries) UpdateTerm(ctx context.Context, arg UpdateTermParams) error {
	_, err := q.db.ExecContext(ctx, updateTerm,
		arg.Title,
		arg.Body,
		arg.Created,
		arg.ID,
	)
	return err
}
