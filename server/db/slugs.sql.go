// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: slugs.sql

package db

import (
	"context"
	"database/sql"
)

const getAllBlogSlugs = `-- name: GetAllBlogSlugs :many
SELECT slug FROM Blog
`

func (q *Queries) GetAllBlogSlugs(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogSlugs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var slug sql.NullString
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSparePartsSlugs = `-- name: GetAllSparePartsSlugs :many
SELECT slug FROM SpareParts
`

func (q *Queries) GetAllSparePartsSlugs(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAllSparePartsSlugs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var slug sql.NullString
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSupplierSlugs = `-- name: GetAllSupplierSlugs :many
SELECT slug FROM Supplier
`

func (q *Queries) GetAllSupplierSlugs(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getAllSupplierSlugs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var slug sql.NullString
		if err := rows.Scan(&slug); err != nil {
			return nil, err
		}
		items = append(items, slug)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogBySlug = `-- name: GetBlogBySlug :one
SELECT id,
       title,
       date,
       main_image,
       subheading,
       body,
       created,
       slug
FROM Blog
WHERE slug = ?
LIMIT 1
`

func (q *Queries) GetBlogBySlug(ctx context.Context, slug sql.NullString) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Date,
		&i.MainImage,
		&i.Subheading,
		&i.Body,
		&i.Created,
		&i.Slug,
	)
	return i, err
}

const getMachineBySlug = `-- name: GetMachineBySlug :one
SELECT id,
       supplier_id,
       name,
       machine_image,
       description,
       machine_link,
       created,
       slug
FROM Machine
WHERE slug = ?
LIMIT 1
`

func (q *Queries) GetMachineBySlug(ctx context.Context, slug sql.NullString) (Machine, error) {
	row := q.db.QueryRowContext(ctx, getMachineBySlug, slug)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Name,
		&i.MachineImage,
		&i.Description,
		&i.MachineLink,
		&i.Created,
		&i.Slug,
	)
	return i, err
}

const getProductBySlug = `-- name: GetProductBySlug :one
SELECT id, machine_id, name, product_image, description, product_link, slug
FROM Product
WHERE slug = ?
LIMIT 1
`

func (q *Queries) GetProductBySlug(ctx context.Context, slug sql.NullString) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductBySlug, slug)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.MachineID,
		&i.Name,
		&i.ProductImage,
		&i.Description,
		&i.ProductLink,
		&i.Slug,
	)
	return i, err
}

const getSparePartsBySlug = `-- name: GetSparePartsBySlug :one
SELECT id, supplier_id, name, parts_image, spare_parts_link, slug
FROM SpareParts
WHERE slug = ?
LIMIT 1
`

func (q *Queries) GetSparePartsBySlug(ctx context.Context, slug sql.NullString) (SparePart, error) {
	row := q.db.QueryRowContext(ctx, getSparePartsBySlug, slug)
	var i SparePart
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Name,
		&i.PartsImage,
		&i.SparePartsLink,
		&i.Slug,
	)
	return i, err
}

const getSupplierBySlug = `-- name: GetSupplierBySlug :one
SELECT id,
       name,
       logo_image,
       marketing_image,
       description,
       social_facebook,
       social_twitter,
       social_instagram,
       social_youtube,
       social_linkedin,
       social_website,
       created,
       slug
FROM Supplier
WHERE slug = ?
LIMIT 1
`

func (q *Queries) GetSupplierBySlug(ctx context.Context, slug sql.NullString) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, getSupplierBySlug, slug)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoImage,
		&i.MarketingImage,
		&i.Description,
		&i.SocialFacebook,
		&i.SocialTwitter,
		&i.SocialInstagram,
		&i.SocialYoutube,
		&i.SocialLinkedin,
		&i.SocialWebsite,
		&i.Created,
		&i.Slug,
	)
	return i, err
}
