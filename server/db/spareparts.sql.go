// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: spareparts.sql

package db

import (
	"context"
	"database/sql"
)

const createSparePart = `-- name: CreateSparePart :exec
insert into SpareParts (id, supplier_id, name, parts_image, spare_parts_link)
values (?, ?, ?, ?, ?)
`

type CreateSparePartParams struct {
	ID             string         `json:"id"`
	SupplierID     string         `json:"supplier_id"`
	Name           string         `json:"name"`
	PartsImage     sql.NullString `json:"parts_image"`
	SparePartsLink sql.NullString `json:"spare_parts_link"`
}

func (q *Queries) CreateSparePart(ctx context.Context, arg CreateSparePartParams) error {
	_, err := q.db.ExecContext(ctx, createSparePart,
		arg.ID,
		arg.SupplierID,
		arg.Name,
		arg.PartsImage,
		arg.SparePartsLink,
	)
	return err
}

const deleteSparePart = `-- name: DeleteSparePart :exec
delete
from SpareParts
where id = ?
`

func (q *Queries) DeleteSparePart(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSparePart, id)
	return err
}

const getPartByID = `-- name: GetPartByID :one
select id, supplier_id, name, parts_image, spare_parts_link
from SpareParts
where id = ?
`

type GetPartByIDRow struct {
	ID             string         `json:"id"`
	SupplierID     string         `json:"supplier_id"`
	Name           string         `json:"name"`
	PartsImage     sql.NullString `json:"parts_image"`
	SparePartsLink sql.NullString `json:"spare_parts_link"`
}

func (q *Queries) GetPartByID(ctx context.Context, id string) (GetPartByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPartByID, id)
	var i GetPartByIDRow
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Name,
		&i.PartsImage,
		&i.SparePartsLink,
	)
	return i, err
}

const getParts = `-- name: GetParts :many
select id, supplier_id, name, parts_image, spare_parts_link
from SpareParts
where supplier_id = ?
`

type GetPartsRow struct {
	ID             string         `json:"id"`
	SupplierID     string         `json:"supplier_id"`
	Name           string         `json:"name"`
	PartsImage     sql.NullString `json:"parts_image"`
	SparePartsLink sql.NullString `json:"spare_parts_link"`
}

func (q *Queries) GetParts(ctx context.Context, supplierID string) ([]GetPartsRow, error) {
	rows, err := q.db.QueryContext(ctx, getParts, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPartsRow
	for rows.Next() {
		var i GetPartsRow
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Name,
			&i.PartsImage,
			&i.SparePartsLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSparePart = `-- name: UpdateSparePart :exec
update SpareParts
set supplier_id      = ?,
    name             = ?,
    parts_image      = ?,
    spare_parts_link = ?
where id = ?
`

type UpdateSparePartParams struct {
	SupplierID     string         `json:"supplier_id"`
	Name           string         `json:"name"`
	PartsImage     sql.NullString `json:"parts_image"`
	SparePartsLink sql.NullString `json:"spare_parts_link"`
	ID             string         `json:"id"`
}

func (q *Queries) UpdateSparePart(ctx context.Context, arg UpdateSparePartParams) error {
	_, err := q.db.ExecContext(ctx, updateSparePart,
		arg.SupplierID,
		arg.Name,
		arg.PartsImage,
		arg.SparePartsLink,
		arg.ID,
	)
	return err
}

const updateSparePartNoImage = `-- name: UpdateSparePartNoImage :exec
update SpareParts
set supplier_id      = ?,
    name             = ?,
    spare_parts_link = ?
where id = ?
`

type UpdateSparePartNoImageParams struct {
	SupplierID     string         `json:"supplier_id"`
	Name           string         `json:"name"`
	SparePartsLink sql.NullString `json:"spare_parts_link"`
	ID             string         `json:"id"`
}

func (q *Queries) UpdateSparePartNoImage(ctx context.Context, arg UpdateSparePartNoImageParams) error {
	_, err := q.db.ExecContext(ctx, updateSparePartNoImage,
		arg.SupplierID,
		arg.Name,
		arg.SparePartsLink,
		arg.ID,
	)
	return err
}
