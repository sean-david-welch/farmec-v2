// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: exhibition.sql

package db

import (
	"context"
	"database/sql"
)

const createExhibition = `-- name: CreateExhibition :exec
insert into Exhibition (id, title, date, location, info, created)
values (?, ?, ?, ?, ?, ?)
`

type CreateExhibitionParams struct {
	ID       string         `json:"id"`
	Title    string         `json:"title"`
	Date     sql.NullString `json:"date"`
	Location sql.NullString `json:"location"`
	Info     sql.NullString `json:"info"`
	Created  sql.NullString `json:"created"`
}

func (q *Queries) CreateExhibition(ctx context.Context, arg CreateExhibitionParams) error {
	_, err := q.db.ExecContext(ctx, createExhibition,
		arg.ID,
		arg.Title,
		arg.Date,
		arg.Location,
		arg.Info,
		arg.Created,
	)
	return err
}

const deleteExhibition = `-- name: DeleteExhibition :exec
delete
from Exhibition
where id = ?
`

func (q *Queries) DeleteExhibition(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteExhibition, id)
	return err
}

const getExhibitionByID = `-- name: GetExhibitionByID :one
select id, title, date, location, info, created
from Exhibition
where id = ?
`

func (q *Queries) GetExhibitionByID(ctx context.Context, id string) (Exhibition, error) {
	row := q.db.QueryRowContext(ctx, getExhibitionByID, id)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Date,
		&i.Location,
		&i.Info,
		&i.Created,
	)
	return i, err
}

const getExhibitions = `-- name: GetExhibitions :many
select id, title, date, location, info, created
from Exhibition
order by created desc
`

func (q *Queries) GetExhibitions(ctx context.Context) ([]Exhibition, error) {
	rows, err := q.db.QueryContext(ctx, getExhibitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exhibition
	for rows.Next() {
		var i Exhibition
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.Location,
			&i.Info,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExhibition = `-- name: UpdateExhibition :exec
update Exhibition
set title    = ?,
    date     = ?,
    location = ?,
    info     = ?
where id = ?
`

type UpdateExhibitionParams struct {
	Title    string         `json:"title"`
	Date     sql.NullString `json:"date"`
	Location sql.NullString `json:"location"`
	Info     sql.NullString `json:"info"`
	ID       string         `json:"id"`
}

func (q *Queries) UpdateExhibition(ctx context.Context, arg UpdateExhibitionParams) error {
	_, err := q.db.ExecContext(ctx, updateExhibition,
		arg.Title,
		arg.Date,
		arg.Location,
		arg.Info,
		arg.ID,
	)
	return err
}
