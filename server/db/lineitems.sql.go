// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: lineitems.sql

package db

import (
	"context"
	"database/sql"
)

const createLineItem = `-- name: CreateLineItem :exec
insert into LineItems (id, name, price, image) values (?, ?, ?, ?)
`

type CreateLineItemParams struct {
	ID    string         `json:"id"`
	Name  string         `json:"name"`
	Price float64        `json:"price"`
	Image sql.NullString `json:"image"`
}

func (q *Queries) CreateLineItem(ctx context.Context, arg CreateLineItemParams) error {
	_, err := q.db.ExecContext(ctx, createLineItem,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Image,
	)
	return err
}

const deleteLineItem = `-- name: DeleteLineItem :exec
delete from LineItems where id = ?
`

func (q *Queries) DeleteLineItem(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteLineItem, id)
	return err
}

const getLineItemByID = `-- name: GetLineItemByID :one
select id, name, price, image from LineItems where id = ?
`

func (q *Queries) GetLineItemByID(ctx context.Context, id string) (LineItem, error) {
	row := q.db.QueryRowContext(ctx, getLineItemByID, id)
	var i LineItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Image,
	)
	return i, err
}

const getLineItems = `-- name: GetLineItems :many
select id, name, price, image from LineItems
`

func (q *Queries) GetLineItems(ctx context.Context) ([]LineItem, error) {
	rows, err := q.db.QueryContext(ctx, getLineItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineItem
	for rows.Next() {
		var i LineItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLineItem = `-- name: UpdateLineItem :exec
update LineItems set name = ?, price = ?, image = ? where id = ?
`

type UpdateLineItemParams struct {
	Name  string         `json:"name"`
	Price float64        `json:"price"`
	Image sql.NullString `json:"image"`
	ID    string         `json:"id"`
}

func (q *Queries) UpdateLineItem(ctx context.Context, arg UpdateLineItemParams) error {
	_, err := q.db.ExecContext(ctx, updateLineItem,
		arg.Name,
		arg.Price,
		arg.Image,
		arg.ID,
	)
	return err
}

const updateLineItemNoImage = `-- name: UpdateLineItemNoImage :exec
update LineItems set name = ?, price = ? where id = ?
`

type UpdateLineItemNoImageParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
	ID    string  `json:"id"`
}

func (q *Queries) UpdateLineItemNoImage(ctx context.Context, arg UpdateLineItemNoImageParams) error {
	_, err := q.db.ExecContext(ctx, updateLineItemNoImage, arg.Name, arg.Price, arg.ID)
	return err
}
