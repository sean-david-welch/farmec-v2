// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package db

import (
	"context"
	"database/sql"
)

const createBlog = `-- name: CreateBlog :exec
insert into Blog (id, title, date, main_image, subheading, body, created)
values (?, ?, ?, ?, ?, ?, ?)
`

type CreateBlogParams struct {
	ID         string         `json:"id"`
	Title      string         `json:"title"`
	Date       sql.NullString `json:"date"`
	MainImage  sql.NullString `json:"main_image"`
	Subheading sql.NullString `json:"subheading"`
	Body       sql.NullString `json:"body"`
	Created    sql.NullString `json:"created"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) error {
	_, err := q.db.ExecContext(ctx, createBlog,
		arg.ID,
		arg.Title,
		arg.Date,
		arg.MainImage,
		arg.Subheading,
		arg.Body,
		arg.Created,
	)
	return err
}

const deleteBlog = `-- name: DeleteBlog :exec
delete from Blog
where id = ?
`

func (q *Queries) DeleteBlog(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBlog, id)
	return err
}

const getBlogByID = `-- name: GetBlogByID :one
select id, title, date, main_image, subheading, body, created
from Blog
where id = ?
`

func (q *Queries) GetBlogByID(ctx context.Context, id string) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlogByID, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Date,
		&i.MainImage,
		&i.Subheading,
		&i.Body,
		&i.Created,
	)
	return i, err
}

const getBlogs = `-- name: GetBlogs :many
select id, title, date, main_image, subheading, body, created
from Blog
order by created desc
`

func (q *Queries) GetBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.MainImage,
			&i.Subheading,
			&i.Body,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :exec
update Blog
set title = ?, date = ?, main_image = ?, subheading = ?, body = ?
where id = ?
`

type UpdateBlogParams struct {
	Title      string         `json:"title"`
	Date       sql.NullString `json:"date"`
	MainImage  sql.NullString `json:"main_image"`
	Subheading sql.NullString `json:"subheading"`
	Body       sql.NullString `json:"body"`
	ID         string         `json:"id"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog,
		arg.Title,
		arg.Date,
		arg.MainImage,
		arg.Subheading,
		arg.Body,
		arg.ID,
	)
	return err
}

const updateBlogNoImage = `-- name: UpdateBlogNoImage :exec
update Blog
set title = ?, date = ?, subheading = ?, body = ?
where id = ?
`

type UpdateBlogNoImageParams struct {
	Title      string         `json:"title"`
	Date       sql.NullString `json:"date"`
	Subheading sql.NullString `json:"subheading"`
	Body       sql.NullString `json:"body"`
	ID         string         `json:"id"`
}

func (q *Queries) UpdateBlogNoImage(ctx context.Context, arg UpdateBlogNoImageParams) error {
	_, err := q.db.ExecContext(ctx, updateBlogNoImage,
		arg.Title,
		arg.Date,
		arg.Subheading,
		arg.Body,
		arg.ID,
	)
	return err
}
