// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: video.sql

package db

import (
	"context"
	"database/sql"
)

const createVideo = `-- name: CreateVideo :exec
insert into Video (id, supplier_id, web_url, title, description, video_id, thumbnail_url, created)
values (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateVideoParams struct {
	ID           string         `json:"id"`
	SupplierID   string         `json:"supplier_id"`
	WebUrl       sql.NullString `json:"web_url"`
	Title        sql.NullString `json:"title"`
	Description  sql.NullString `json:"description"`
	VideoID      sql.NullString `json:"video_id"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	Created      sql.NullString `json:"created"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) error {
	_, err := q.db.ExecContext(ctx, createVideo,
		arg.ID,
		arg.SupplierID,
		arg.WebUrl,
		arg.Title,
		arg.Description,
		arg.VideoID,
		arg.ThumbnailUrl,
		arg.Created,
	)
	return err
}

const deleteVideo = `-- name: DeleteVideo :exec
delete
from Video
where id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, id)
	return err
}

const selectVideoByID = `-- name: SelectVideoByID :one
select id,
       supplier_id,
       web_url,
       title,
       description,
       video_id,
       thumbnail_url,
       created
from Video
where id = ?
`

func (q *Queries) SelectVideoByID(ctx context.Context, id string) (Video, error) {
	row := q.db.QueryRowContext(ctx, selectVideoByID, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.WebUrl,
		&i.Title,
		&i.Description,
		&i.VideoID,
		&i.ThumbnailUrl,
		&i.Created,
	)
	return i, err
}

const selectVideos = `-- name: SelectVideos :many
select id,
       supplier_id,
       web_url,
       title,
       description,
       video_id,
       thumbnail_url,
       created
from Video
where supplier_id = ?
`

func (q *Queries) SelectVideos(ctx context.Context, supplierID string) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, selectVideos, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.WebUrl,
			&i.Title,
			&i.Description,
			&i.VideoID,
			&i.ThumbnailUrl,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVideo = `-- name: UpdateVideo :exec
update Video
set supplier_id   = ?,
    web_url       = ?,
    title         = ?,
    description   = ?,
    video_id      = ?,
    thumbnail_url = ?
where id = ?
`

type UpdateVideoParams struct {
	SupplierID   string         `json:"supplier_id"`
	WebUrl       sql.NullString `json:"web_url"`
	Title        sql.NullString `json:"title"`
	Description  sql.NullString `json:"description"`
	VideoID      sql.NullString `json:"video_id"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.ExecContext(ctx, updateVideo,
		arg.SupplierID,
		arg.WebUrl,
		arg.Title,
		arg.Description,
		arg.VideoID,
		arg.ThumbnailUrl,
		arg.ID,
	)
	return err
}
