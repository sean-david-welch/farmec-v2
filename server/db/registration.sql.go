// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: registration.sql

package db

import (
	"context"
	"database/sql"
)

const createRegistration = `-- name: CreateRegistration :exec
insert into MachineRegistration (id, dealer_name, dealer_address, owner_name, owner_address, machine_model,
                                 serial_number, install_date, invoice_number, complete_supply, pdi_complete,
                                 pto_correct, machine_test_run, safety_induction, operator_handbook, date, completed_by,
                                 created)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRegistrationParams struct {
	ID               string         `json:"id"`
	DealerName       string         `json:"dealer_name"`
	DealerAddress    sql.NullString `json:"dealer_address"`
	OwnerName        string         `json:"owner_name"`
	OwnerAddress     sql.NullString `json:"owner_address"`
	MachineModel     string         `json:"machine_model"`
	SerialNumber     string         `json:"serial_number"`
	InstallDate      sql.NullString `json:"install_date"`
	InvoiceNumber    sql.NullString `json:"invoice_number"`
	CompleteSupply   sql.NullInt64  `json:"complete_supply"`
	PdiComplete      sql.NullInt64  `json:"pdi_complete"`
	PtoCorrect       sql.NullInt64  `json:"pto_correct"`
	MachineTestRun   sql.NullInt64  `json:"machine_test_run"`
	SafetyInduction  sql.NullInt64  `json:"safety_induction"`
	OperatorHandbook sql.NullInt64  `json:"operator_handbook"`
	Date             sql.NullString `json:"date"`
	CompletedBy      sql.NullString `json:"completed_by"`
	Created          sql.NullString `json:"created"`
}

func (q *Queries) CreateRegistration(ctx context.Context, arg CreateRegistrationParams) error {
	_, err := q.db.ExecContext(ctx, createRegistration,
		arg.ID,
		arg.DealerName,
		arg.DealerAddress,
		arg.OwnerName,
		arg.OwnerAddress,
		arg.MachineModel,
		arg.SerialNumber,
		arg.InstallDate,
		arg.InvoiceNumber,
		arg.CompleteSupply,
		arg.PdiComplete,
		arg.PtoCorrect,
		arg.MachineTestRun,
		arg.SafetyInduction,
		arg.OperatorHandbook,
		arg.Date,
		arg.CompletedBy,
		arg.Created,
	)
	return err
}

const deleteRegistration = `-- name: DeleteRegistration :exec
delete
from MachineRegistration
where id = ?
`

func (q *Queries) DeleteRegistration(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRegistration, id)
	return err
}

const getRegistrations = `-- name: GetRegistrations :many
select id,
       dealer_name,
       dealer_address,
       owner_name,
       owner_address,
       machine_model,
       serial_number,
       install_date,
       invoice_number,
       complete_supply,
       pdi_complete,
       pto_correct,
       machine_test_run,
       safety_induction,
       operator_handbook,
       date,
       completed_by,
       created
from MachineRegistration
`

func (q *Queries) GetRegistrations(ctx context.Context) ([]MachineRegistration, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MachineRegistration
	for rows.Next() {
		var i MachineRegistration
		if err := rows.Scan(
			&i.ID,
			&i.DealerName,
			&i.DealerAddress,
			&i.OwnerName,
			&i.OwnerAddress,
			&i.MachineModel,
			&i.SerialNumber,
			&i.InstallDate,
			&i.InvoiceNumber,
			&i.CompleteSupply,
			&i.PdiComplete,
			&i.PtoCorrect,
			&i.MachineTestRun,
			&i.SafetyInduction,
			&i.OperatorHandbook,
			&i.Date,
			&i.CompletedBy,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegistrationsByID = `-- name: GetRegistrationsByID :one
select id,
       dealer_name,
       dealer_address,
       owner_name,
       owner_address,
       machine_model,
       serial_number,
       install_date,
       invoice_number,
       complete_supply,
       pdi_complete,
       pto_correct,
       machine_test_run,
       safety_induction,
       operator_handbook,
       date,
       completed_by,
       created
from MachineRegistration
where id = ?
`

func (q *Queries) GetRegistrationsByID(ctx context.Context, id string) (MachineRegistration, error) {
	row := q.db.QueryRowContext(ctx, getRegistrationsByID, id)
	var i MachineRegistration
	err := row.Scan(
		&i.ID,
		&i.DealerName,
		&i.DealerAddress,
		&i.OwnerName,
		&i.OwnerAddress,
		&i.MachineModel,
		&i.SerialNumber,
		&i.InstallDate,
		&i.InvoiceNumber,
		&i.CompleteSupply,
		&i.PdiComplete,
		&i.PtoCorrect,
		&i.MachineTestRun,
		&i.SafetyInduction,
		&i.OperatorHandbook,
		&i.Date,
		&i.CompletedBy,
		&i.Created,
	)
	return i, err
}

const updateRegistration = `-- name: UpdateRegistration :exec
update MachineRegistration
set dealer_name       = ?,
    dealer_address    = ?,
    owner_name        = ?,
    owner_address     = ?,
    machine_model     = ?,
    serial_number     = ?,
    install_date      = ?,
    invoice_number    = ?,
    complete_supply   = ?,
    pdi_complete      = ?,
    pto_correct       = ?,
    machine_test_run  = ?,
    safety_induction  = ?,
    operator_handbook = ?,
    date              = ?,
    completed_by      = ?
where id = ?
`

type UpdateRegistrationParams struct {
	DealerName       string         `json:"dealer_name"`
	DealerAddress    sql.NullString `json:"dealer_address"`
	OwnerName        string         `json:"owner_name"`
	OwnerAddress     sql.NullString `json:"owner_address"`
	MachineModel     string         `json:"machine_model"`
	SerialNumber     string         `json:"serial_number"`
	InstallDate      sql.NullString `json:"install_date"`
	InvoiceNumber    sql.NullString `json:"invoice_number"`
	CompleteSupply   sql.NullInt64  `json:"complete_supply"`
	PdiComplete      sql.NullInt64  `json:"pdi_complete"`
	PtoCorrect       sql.NullInt64  `json:"pto_correct"`
	MachineTestRun   sql.NullInt64  `json:"machine_test_run"`
	SafetyInduction  sql.NullInt64  `json:"safety_induction"`
	OperatorHandbook sql.NullInt64  `json:"operator_handbook"`
	Date             sql.NullString `json:"date"`
	CompletedBy      sql.NullString `json:"completed_by"`
	ID               string         `json:"id"`
}

func (q *Queries) UpdateRegistration(ctx context.Context, arg UpdateRegistrationParams) error {
	_, err := q.db.ExecContext(ctx, updateRegistration,
		arg.DealerName,
		arg.DealerAddress,
		arg.OwnerName,
		arg.OwnerAddress,
		arg.MachineModel,
		arg.SerialNumber,
		arg.InstallDate,
		arg.InvoiceNumber,
		arg.CompleteSupply,
		arg.PdiComplete,
		arg.PtoCorrect,
		arg.MachineTestRun,
		arg.SafetyInduction,
		arg.OperatorHandbook,
		arg.Date,
		arg.CompletedBy,
		arg.ID,
	)
	return err
}
