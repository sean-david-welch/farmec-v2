// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: warranty.sql

package db

import (
	"context"
	"database/sql"
)

const createPartsRequired = `-- name: CreatePartsRequired :exec
insert into PartsRequired (id, warranty_id, part_number, quantity_needed, invoice_number, description)
values (?, ?, ?, ?, ?, ?)
`

type CreatePartsRequiredParams struct {
	ID             string         `json:"id"`
	WarrantyID     string         `json:"warranty_id"`
	PartNumber     sql.NullString `json:"part_number"`
	QuantityNeeded string         `json:"quantity_needed"`
	InvoiceNumber  sql.NullString `json:"invoice_number"`
	Description    sql.NullString `json:"description"`
}

func (q *Queries) CreatePartsRequired(ctx context.Context, arg CreatePartsRequiredParams) error {
	_, err := q.db.ExecContext(ctx, createPartsRequired,
		arg.ID,
		arg.WarrantyID,
		arg.PartNumber,
		arg.QuantityNeeded,
		arg.InvoiceNumber,
		arg.Description,
	)
	return err
}

const createWarranty = `-- name: CreateWarranty :exec
insert into WarrantyClaim (id, dealer, dealer_contact, owner_name, machine_model, serial_number, install_date,
                           failure_date, repair_date, failure_details, repair_details, labour_hours, completed_by,
                           created)
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateWarrantyParams struct {
	ID             string         `json:"id"`
	Dealer         string         `json:"dealer"`
	DealerContact  sql.NullString `json:"dealer_contact"`
	OwnerName      string         `json:"owner_name"`
	MachineModel   string         `json:"machine_model"`
	SerialNumber   string         `json:"serial_number"`
	InstallDate    sql.NullString `json:"install_date"`
	FailureDate    sql.NullString `json:"failure_date"`
	RepairDate     sql.NullString `json:"repair_date"`
	FailureDetails sql.NullString `json:"failure_details"`
	RepairDetails  sql.NullString `json:"repair_details"`
	LabourHours    sql.NullString `json:"labour_hours"`
	CompletedBy    sql.NullString `json:"completed_by"`
	Created        sql.NullString `json:"created"`
}

func (q *Queries) CreateWarranty(ctx context.Context, arg CreateWarrantyParams) error {
	_, err := q.db.ExecContext(ctx, createWarranty,
		arg.ID,
		arg.Dealer,
		arg.DealerContact,
		arg.OwnerName,
		arg.MachineModel,
		arg.SerialNumber,
		arg.InstallDate,
		arg.FailureDate,
		arg.RepairDate,
		arg.FailureDetails,
		arg.RepairDetails,
		arg.LabourHours,
		arg.CompletedBy,
		arg.Created,
	)
	return err
}

const deletePartRequired = `-- name: DeletePartRequired :exec
delete
from PartsRequired
where warranty_id = ?
`

func (q *Queries) DeletePartRequired(ctx context.Context, warrantyID string) error {
	_, err := q.db.ExecContext(ctx, deletePartRequired, warrantyID)
	return err
}

const deleteWarranty = `-- name: DeleteWarranty :exec
delete from PartsRequired where warranty_id = ?
`

func (q *Queries) DeleteWarranty(ctx context.Context, warrantyID string) error {
	_, err := q.db.ExecContext(ctx, deleteWarranty, warrantyID)
	return err
}

const getWarranties = `-- name: GetWarranties :many
select id, dealer, owner_name
from WarrantyClaim
order by created desc
`

type GetWarrantiesRow struct {
	ID        string `json:"id"`
	Dealer    string `json:"dealer"`
	OwnerName string `json:"owner_name"`
}

func (q *Queries) GetWarranties(ctx context.Context) ([]GetWarrantiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getWarranties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWarrantiesRow
	for rows.Next() {
		var i GetWarrantiesRow
		if err := rows.Scan(&i.ID, &i.Dealer, &i.OwnerName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWarrantyByID = `-- name: GetWarrantyByID :one
select wc.id,
       wc.dealer,
       wc.dealer_contact,
       wc.owner_name,
       wc.machine_model,
       wc.serial_number,
       wc.install_date,
       wc.failure_date,
       wc.repair_date,
       wc.failure_details,
       wc.repair_details,
       wc.labour_hours,
       wc.completed_by,
       wc.created,
       pr.id as part_id,
       pr.part_number,
       pr.quantity_needed,
       pr.invoice_number,
       pr.description
from WarrantyClaim wc
         left join
     PartsRequired pr on wc.id = pr.warranty_id
where wc.id = ?
`

type GetWarrantyByIDRow struct {
	ID             string         `json:"id"`
	Dealer         string         `json:"dealer"`
	DealerContact  sql.NullString `json:"dealer_contact"`
	OwnerName      string         `json:"owner_name"`
	MachineModel   string         `json:"machine_model"`
	SerialNumber   string         `json:"serial_number"`
	InstallDate    sql.NullString `json:"install_date"`
	FailureDate    sql.NullString `json:"failure_date"`
	RepairDate     sql.NullString `json:"repair_date"`
	FailureDetails sql.NullString `json:"failure_details"`
	RepairDetails  sql.NullString `json:"repair_details"`
	LabourHours    sql.NullString `json:"labour_hours"`
	CompletedBy    sql.NullString `json:"completed_by"`
	Created        sql.NullString `json:"created"`
	PartID         sql.NullString `json:"part_id"`
	PartNumber     sql.NullString `json:"part_number"`
	QuantityNeeded sql.NullString `json:"quantity_needed"`
	InvoiceNumber  sql.NullString `json:"invoice_number"`
	Description    sql.NullString `json:"description"`
}

func (q *Queries) GetWarrantyByID(ctx context.Context, id string) (GetWarrantyByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getWarrantyByID, id)
	var i GetWarrantyByIDRow
	err := row.Scan(
		&i.ID,
		&i.Dealer,
		&i.DealerContact,
		&i.OwnerName,
		&i.MachineModel,
		&i.SerialNumber,
		&i.InstallDate,
		&i.FailureDate,
		&i.RepairDate,
		&i.FailureDetails,
		&i.RepairDetails,
		&i.LabourHours,
		&i.CompletedBy,
		&i.Created,
		&i.PartID,
		&i.PartNumber,
		&i.QuantityNeeded,
		&i.InvoiceNumber,
		&i.Description,
	)
	return i, err
}

const updateWarranty = `-- name: UpdateWarranty :exec
update WarrantyClaim
set dealer          = ?,
    dealer_contact  = ?,
    owner_name      = ?,
    machine_model   = ?,
    serial_number   = ?,
    install_date    = ?,
    failure_date    = ?,
    repair_date     = ?,
    failure_details = ?,
    repair_details  = ?,
    labour_hours    = ?,
    completed_by    = ?
where id = ?
`

type UpdateWarrantyParams struct {
	Dealer         string         `json:"dealer"`
	DealerContact  sql.NullString `json:"dealer_contact"`
	OwnerName      string         `json:"owner_name"`
	MachineModel   string         `json:"machine_model"`
	SerialNumber   string         `json:"serial_number"`
	InstallDate    sql.NullString `json:"install_date"`
	FailureDate    sql.NullString `json:"failure_date"`
	RepairDate     sql.NullString `json:"repair_date"`
	FailureDetails sql.NullString `json:"failure_details"`
	RepairDetails  sql.NullString `json:"repair_details"`
	LabourHours    sql.NullString `json:"labour_hours"`
	CompletedBy    sql.NullString `json:"completed_by"`
	ID             string         `json:"id"`
}

func (q *Queries) UpdateWarranty(ctx context.Context, arg UpdateWarrantyParams) error {
	_, err := q.db.ExecContext(ctx, updateWarranty,
		arg.Dealer,
		arg.DealerContact,
		arg.OwnerName,
		arg.MachineModel,
		arg.SerialNumber,
		arg.InstallDate,
		arg.FailureDate,
		arg.RepairDate,
		arg.FailureDetails,
		arg.RepairDetails,
		arg.LabourHours,
		arg.CompletedBy,
		arg.ID,
	)
	return err
}
