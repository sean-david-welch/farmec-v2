// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: suppliers.sql

package db

import (
	"context"
	"database/sql"
)

const createSupplier = `-- name: CreateSupplier :exec
insert into Supplier (id, name, logo_image, marketing_image, description,
                      social_facebook, social_twitter, social_instagram,
                      social_youtube, social_linkedin, social_website, created)
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSupplierParams struct {
	ID              string         `json:"id"`
	Name            string         `json:"name"`
	LogoImage       sql.NullString `json:"logo_image"`
	MarketingImage  sql.NullString `json:"marketing_image"`
	Description     sql.NullString `json:"description"`
	SocialFacebook  sql.NullString `json:"social_facebook"`
	SocialTwitter   sql.NullString `json:"social_twitter"`
	SocialInstagram sql.NullString `json:"social_instagram"`
	SocialYoutube   sql.NullString `json:"social_youtube"`
	SocialLinkedin  sql.NullString `json:"social_linkedin"`
	SocialWebsite   sql.NullString `json:"social_website"`
	Created         sql.NullString `json:"created"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) error {
	_, err := q.db.ExecContext(ctx, createSupplier,
		arg.ID,
		arg.Name,
		arg.LogoImage,
		arg.MarketingImage,
		arg.Description,
		arg.SocialFacebook,
		arg.SocialTwitter,
		arg.SocialInstagram,
		arg.SocialYoutube,
		arg.SocialLinkedin,
		arg.SocialWebsite,
		arg.Created,
	)
	return err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
delete from Supplier where id = ?
`

func (q *Queries) DeleteSupplier(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, id)
	return err
}

const getSupplierByID = `-- name: GetSupplierByID :one
select id, name, logo_image, marketing_image,
    description, social_facebook, social_instagram,
    social_linkedin, social_twitter, social_youtube, social_website, created
from Supplier
where id = ?
`

type GetSupplierByIDRow struct {
	ID              string         `json:"id"`
	Name            string         `json:"name"`
	LogoImage       sql.NullString `json:"logo_image"`
	MarketingImage  sql.NullString `json:"marketing_image"`
	Description     sql.NullString `json:"description"`
	SocialFacebook  sql.NullString `json:"social_facebook"`
	SocialInstagram sql.NullString `json:"social_instagram"`
	SocialLinkedin  sql.NullString `json:"social_linkedin"`
	SocialTwitter   sql.NullString `json:"social_twitter"`
	SocialYoutube   sql.NullString `json:"social_youtube"`
	SocialWebsite   sql.NullString `json:"social_website"`
	Created         sql.NullString `json:"created"`
}

func (q *Queries) GetSupplierByID(ctx context.Context, id string) (GetSupplierByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSupplierByID, id)
	var i GetSupplierByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoImage,
		&i.MarketingImage,
		&i.Description,
		&i.SocialFacebook,
		&i.SocialInstagram,
		&i.SocialLinkedin,
		&i.SocialTwitter,
		&i.SocialYoutube,
		&i.SocialWebsite,
		&i.Created,
	)
	return i, err
}

const getSuppliers = `-- name: GetSuppliers :many
select id, name, logo_image, marketing_image,
       description, social_facebook, social_instagram,
       social_linkedin, social_twitter, social_youtube, social_website, created
from Supplier
order by created desc
`

type GetSuppliersRow struct {
	ID              string         `json:"id"`
	Name            string         `json:"name"`
	LogoImage       sql.NullString `json:"logo_image"`
	MarketingImage  sql.NullString `json:"marketing_image"`
	Description     sql.NullString `json:"description"`
	SocialFacebook  sql.NullString `json:"social_facebook"`
	SocialInstagram sql.NullString `json:"social_instagram"`
	SocialLinkedin  sql.NullString `json:"social_linkedin"`
	SocialTwitter   sql.NullString `json:"social_twitter"`
	SocialYoutube   sql.NullString `json:"social_youtube"`
	SocialWebsite   sql.NullString `json:"social_website"`
	Created         sql.NullString `json:"created"`
}

func (q *Queries) GetSuppliers(ctx context.Context) ([]GetSuppliersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSuppliersRow
	for rows.Next() {
		var i GetSuppliersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoImage,
			&i.MarketingImage,
			&i.Description,
			&i.SocialFacebook,
			&i.SocialInstagram,
			&i.SocialLinkedin,
			&i.SocialTwitter,
			&i.SocialYoutube,
			&i.SocialWebsite,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :exec
update Supplier
set name = ?, logo_image = ?, marketing_image = ?, description = ?,
    social_facebook = ?, social_twitter = ?, social_instagram = ?, social_youtube = ?,
    social_linkedin = ?, social_website = ?
where id = ?
`

type UpdateSupplierParams struct {
	Name            string         `json:"name"`
	LogoImage       sql.NullString `json:"logo_image"`
	MarketingImage  sql.NullString `json:"marketing_image"`
	Description     sql.NullString `json:"description"`
	SocialFacebook  sql.NullString `json:"social_facebook"`
	SocialTwitter   sql.NullString `json:"social_twitter"`
	SocialInstagram sql.NullString `json:"social_instagram"`
	SocialYoutube   sql.NullString `json:"social_youtube"`
	SocialLinkedin  sql.NullString `json:"social_linkedin"`
	SocialWebsite   sql.NullString `json:"social_website"`
	ID              string         `json:"id"`
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) error {
	_, err := q.db.ExecContext(ctx, updateSupplier,
		arg.Name,
		arg.LogoImage,
		arg.MarketingImage,
		arg.Description,
		arg.SocialFacebook,
		arg.SocialTwitter,
		arg.SocialInstagram,
		arg.SocialYoutube,
		arg.SocialLinkedin,
		arg.SocialWebsite,
		arg.ID,
	)
	return err
}

const updateSupplierNoImage = `-- name: UpdateSupplierNoImage :exec
update Supplier
set name = ?, description = ?, social_facebook = ?, social_twitter = ?,
    social_instagram = ?, social_youtube = ?, social_linkedin = ?, social_website = ?
where id = ?
`

type UpdateSupplierNoImageParams struct {
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	SocialFacebook  sql.NullString `json:"social_facebook"`
	SocialTwitter   sql.NullString `json:"social_twitter"`
	SocialInstagram sql.NullString `json:"social_instagram"`
	SocialYoutube   sql.NullString `json:"social_youtube"`
	SocialLinkedin  sql.NullString `json:"social_linkedin"`
	SocialWebsite   sql.NullString `json:"social_website"`
	ID              string         `json:"id"`
}

func (q *Queries) UpdateSupplierNoImage(ctx context.Context, arg UpdateSupplierNoImageParams) error {
	_, err := q.db.ExecContext(ctx, updateSupplierNoImage,
		arg.Name,
		arg.Description,
		arg.SocialFacebook,
		arg.SocialTwitter,
		arg.SocialInstagram,
		arg.SocialYoutube,
		arg.SocialLinkedin,
		arg.SocialWebsite,
		arg.ID,
	)
	return err
}
