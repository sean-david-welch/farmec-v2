// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: machines.sql

package db

import (
	"context"
	"database/sql"
)

const createMachine = `-- name: CreateMachine :exec
insert into Machine (id, supplier_id, name, machine_image, description, machine_link, created)
values (?, ?, ?, ?, ?, ?, ?)
`

type CreateMachineParams struct {
	ID           string         `json:"id"`
	SupplierID   string         `json:"supplier_id"`
	Name         string         `json:"name"`
	MachineImage sql.NullString `json:"machine_image"`
	Description  sql.NullString `json:"description"`
	MachineLink  sql.NullString `json:"machine_link"`
	Created      sql.NullString `json:"created"`
}

func (q *Queries) CreateMachine(ctx context.Context, arg CreateMachineParams) error {
	_, err := q.db.ExecContext(ctx, createMachine,
		arg.ID,
		arg.SupplierID,
		arg.Name,
		arg.MachineImage,
		arg.Description,
		arg.MachineLink,
		arg.Created,
	)
	return err
}

const deleteMachine = `-- name: DeleteMachine :exec
delete
from Machine
where id = ?
`

func (q *Queries) DeleteMachine(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMachine, id)
	return err
}

const getMachineByID = `-- name: GetMachineByID :one
select id, supplier_id, name, machine_image, description, machine_link, created
from Machine
where id = ?
`

func (q *Queries) GetMachineByID(ctx context.Context, id string) (Machine, error) {
	row := q.db.QueryRowContext(ctx, getMachineByID, id)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.Name,
		&i.MachineImage,
		&i.Description,
		&i.MachineLink,
		&i.Created,
	)
	return i, err
}

const getMachines = `-- name: GetMachines :many
select id, supplier_id, name, machine_image, description, machine_link, created
from Machine
where supplier_id = ?
`

func (q *Queries) GetMachines(ctx context.Context, supplierID string) ([]Machine, error) {
	rows, err := q.db.QueryContext(ctx, getMachines, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.ID,
			&i.SupplierID,
			&i.Name,
			&i.MachineImage,
			&i.Description,
			&i.MachineLink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMachine = `-- name: UpdateMachine :exec
update Machine
set supplier_id   = ?,
    name          = ?,
    machine_image = ?,
    description   = ?,
    machine_link  = ?
where id = ?
`

type UpdateMachineParams struct {
	SupplierID   string         `json:"supplier_id"`
	Name         string         `json:"name"`
	MachineImage sql.NullString `json:"machine_image"`
	Description  sql.NullString `json:"description"`
	MachineLink  sql.NullString `json:"machine_link"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateMachine(ctx context.Context, arg UpdateMachineParams) error {
	_, err := q.db.ExecContext(ctx, updateMachine,
		arg.SupplierID,
		arg.Name,
		arg.MachineImage,
		arg.Description,
		arg.MachineLink,
		arg.ID,
	)
	return err
}

const updateMachineNoImage = `-- name: UpdateMachineNoImage :exec
update Machine
set supplier_id  = ?,
    name         = ?,
    description  = ?,
    machine_link = ?
where id = ?
`

type UpdateMachineNoImageParams struct {
	SupplierID  string         `json:"supplier_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	MachineLink sql.NullString `json:"machine_link"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateMachineNoImage(ctx context.Context, arg UpdateMachineNoImageParams) error {
	_, err := q.db.ExecContext(ctx, updateMachineNoImage,
		arg.SupplierID,
		arg.Name,
		arg.Description,
		arg.MachineLink,
		arg.ID,
	)
	return err
}
