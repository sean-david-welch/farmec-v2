package details

import (
	"fmt"
	"github.com/sean-david-welch/farmec-v2/server/types"
	"github.com/sean-david-welch/farmec-v2/server/views"
	"github.com/sean-david-welch/farmec-v2/server/views/components"
	"github.com/sean-david-welch/farmec-v2/server/views/layout"
)

func getMachineRegistrationDetailMetadata(registration types.MachineRegistration) views.Metadata {
    title := fmt.Sprintf("Machine Registration: %s - %s", registration.DealerName, registration.OwnerName)
    description := fmt.Sprintf("Machine registration for %s model with serial number %s",
        registration.MachineModel,
        registration.SerialNumber)

    return views.Metadata{
        Title:         title,
        Description:   description,
        OgTitle:       title,
        OgDescription: description,
        OgImage:       "", // No image for machine registrations
        OgUrl:         fmt.Sprintf("https://www.farmec.ie/registrations/%s", registration.ID),
        TwitterTitle:  title,
        TwitterDesc:   description,
        TwitterImage:  "", // No image for machine registrations
        CanonicalUrl:  fmt.Sprintf("https://www.farmec.ie/registrations/%s", registration.ID),
    }
}

func getMachineRegistrationDetailsMap(registration types.MachineRegistration) map[string]interface{} {
	return map[string]interface{}{
		"dealer_name":       &registration.DealerName,
		"dealer_address":    &registration.DealerAddress,
		"owner_name":        &registration.OwnerName,
		"owner_address":     &registration.OwnerAddress,
		"machine_model":     &registration.MachineModel,
		"serial_number":     &registration.SerialNumber,
		"install_date":      &registration.InstallDate,
		"invoice_number":    &registration.InvoiceNumber,
		"complete_supply":   &registration.CompleteSupply,
		"pdi_complete":      &registration.PdiComplete,
		"pto_correct":       &registration.PtoCorrect,
		"machine_test_run":  &registration.MachineTestRun,
		"safety_induction":  &registration.SafetyInduction,
		"operator_handbook": &registration.OperatorHandbook,
		"date":              &registration.Date,
		"completed_by":      &registration.CompletedBy,
	}
}

templ registrationDetailContent(isAdmin bool, isError bool, registration types.MachineRegistration) {
	<section id="warranty-detail">
		if (isError) {
			@layout.ErrorComponent()
		}
		<h1 class="sectionHeading">
			{ fmt.Sprintf("Machine Registration: %v -- %v", registration.DealerName, registration.OwnerName) }
		</h1>
		<div class="warrantyDetail">
			for key, value := range getMachineRegistrationDetailsMap(registration) {
				<div class="warrantyGrid">
					<div class="label">{ key }</div>
					<div class="value">{ fmt.Sprintf("%v", value) }</div>
				</div>
			}
			<div class="warrantyGrid">
				// need to map the structd label to their values
				<div class="label"></div>
				<div class="value"></div>
			</div>
			if (isAdmin) {
				<div class="optionsBtn">
					// reg from
					@components.DeleteButton(registration.ID, "registrations")
				</div>
			}
			// download button
		</div>
	</section>
}

templ ReigstrationDetail(isAdmin bool, isError bool, registration types.MachineRegistration, suppliers []types.Supplier) {
	@views.Base(
		registrationDetailContent(isAdmin, isError, registration),
		getRegistrationDetailMetadata(registration),
		[]string{"account.css"},
		suppliers,
	)
}
