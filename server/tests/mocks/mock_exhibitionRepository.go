// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/exhibitionRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockExhibitionRepository is a mock of ExhibitionRepository interface.
type MockExhibitionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExhibitionRepositoryMockRecorder
}

// MockExhibitionRepositoryMockRecorder is the mock recorder for MockExhibitionRepository.
type MockExhibitionRepositoryMockRecorder struct {
	mock *MockExhibitionRepository
}

// NewMockExhibitionRepository creates a new mock instance.
func NewMockExhibitionRepository(ctrl *gomock.Controller) *MockExhibitionRepository {
	mock := &MockExhibitionRepository{ctrl: ctrl}
	mock.recorder = &MockExhibitionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExhibitionRepository) EXPECT() *MockExhibitionRepositoryMockRecorder {
	return m.recorder
}

// CreateExhibition mocks base method.
func (m *MockExhibitionRepository) CreateExhibition(exhibition *types.Exhibition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExhibition", exhibition)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExhibition indicates an expected call of CreateExhibition.
func (mr *MockExhibitionRepositoryMockRecorder) CreateExhibition(exhibition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExhibition", reflect.TypeOf((*MockExhibitionRepository)(nil).CreateExhibition), exhibition)
}

// DeleteExhibition mocks base method.
func (m *MockExhibitionRepository) DeleteExhibition(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExhibition", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExhibition indicates an expected call of DeleteExhibition.
func (mr *MockExhibitionRepositoryMockRecorder) DeleteExhibition(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExhibition", reflect.TypeOf((*MockExhibitionRepository)(nil).DeleteExhibition), id)
}

// GetExhibitions mocks base method.
func (m *MockExhibitionRepository) GetExhibitions() ([]types.Exhibition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExhibitions")
	ret0, _ := ret[0].([]types.Exhibition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExhibitions indicates an expected call of GetExhibitions.
func (mr *MockExhibitionRepositoryMockRecorder) GetExhibitions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExhibitions", reflect.TypeOf((*MockExhibitionRepository)(nil).GetExhibitions))
}

// UpdateExhibition mocks base method.
func (m *MockExhibitionRepository) UpdateExhibition(id string, exhibition *types.Exhibition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExhibition", id, exhibition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExhibition indicates an expected call of UpdateExhibition.
func (mr *MockExhibitionRepositoryMockRecorder) UpdateExhibition(id, exhibition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExhibition", reflect.TypeOf((*MockExhibitionRepository)(nil).UpdateExhibition), id, exhibition)
}
