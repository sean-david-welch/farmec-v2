// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/partsRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockPartsRepository is a mock of PartsRepository interface.
type MockPartsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPartsRepositoryMockRecorder
}

// MockPartsRepositoryMockRecorder is the mock recorder for MockPartsRepository.
type MockPartsRepositoryMockRecorder struct {
	mock *MockPartsRepository
}

// NewMockPartsRepository creates a new mock instance.
func NewMockPartsRepository(ctrl *gomock.Controller) *MockPartsRepository {
	mock := &MockPartsRepository{ctrl: ctrl}
	mock.recorder = &MockPartsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartsRepository) EXPECT() *MockPartsRepositoryMockRecorder {
	return m.recorder
}

// CreatePart mocks base method.
func (m *MockPartsRepository) CreatePart(part *types.Sparepart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePart", part)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePart indicates an expected call of CreatePart.
func (mr *MockPartsRepositoryMockRecorder) CreatePart(part interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePart", reflect.TypeOf((*MockPartsRepository)(nil).CreatePart), part)
}

// DeletePart mocks base method.
func (m *MockPartsRepository) DeletePart(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePart", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePart indicates an expected call of DeletePart.
func (mr *MockPartsRepositoryMockRecorder) DeletePart(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePart", reflect.TypeOf((*MockPartsRepository)(nil).DeletePart), id)
}

// GetPartById mocks base method.
func (m *MockPartsRepository) GetPartById(id string) (*types.Sparepart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartById", id)
	ret0, _ := ret[0].(*types.Sparepart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartById indicates an expected call of GetPartById.
func (mr *MockPartsRepositoryMockRecorder) GetPartById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartById", reflect.TypeOf((*MockPartsRepository)(nil).GetPartById), id)
}

// GetParts mocks base method.
func (m *MockPartsRepository) GetParts(id string) ([]types.Sparepart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParts", id)
	ret0, _ := ret[0].([]types.Sparepart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParts indicates an expected call of GetParts.
func (mr *MockPartsRepositoryMockRecorder) GetParts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParts", reflect.TypeOf((*MockPartsRepository)(nil).GetParts), id)
}

// UpdatePart mocks base method.
func (m *MockPartsRepository) UpdatePart(id string, part *types.Sparepart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePart", id, part)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePart indicates an expected call of UpdatePart.
func (mr *MockPartsRepositoryMockRecorder) UpdatePart(id, part interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePart", reflect.TypeOf((*MockPartsRepository)(nil).UpdatePart), id, part)
}
