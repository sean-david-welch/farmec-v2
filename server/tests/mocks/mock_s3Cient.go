// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/aws.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// DeleteImageFromS3 mocks base method.
func (m *MockS3Client) DeleteImageFromS3(imageUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageFromS3", imageUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageFromS3 indicates an expected call of DeleteImageFromS3.
func (mr *MockS3ClientMockRecorder) DeleteImageFromS3(imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageFromS3", reflect.TypeOf((*MockS3Client)(nil).DeleteImageFromS3), imageUrl)
}

// GeneratePresignedUrl mocks base method.
func (m *MockS3Client) GeneratePresignedUrl(folder, image string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedUrl", folder, image)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GeneratePresignedUrl indicates an expected call of GeneratePresignedUrl.
func (mr *MockS3ClientMockRecorder) GeneratePresignedUrl(folder, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedUrl", reflect.TypeOf((*MockS3Client)(nil).GeneratePresignedUrl), folder, image)
}
