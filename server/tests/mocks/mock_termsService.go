// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/termsService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockTermsService is a mock of TermsService interface.
type MockTermsService struct {
	ctrl     *gomock.Controller
	recorder *MockTermsServiceMockRecorder
}

// MockTermsServiceMockRecorder is the mock recorder for MockTermsService.
type MockTermsServiceMockRecorder struct {
	mock *MockTermsService
}

// NewMockTermsService creates a new mock instance.
func NewMockTermsService(ctrl *gomock.Controller) *MockTermsService {
	mock := &MockTermsService{ctrl: ctrl}
	mock.recorder = &MockTermsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTermsService) EXPECT() *MockTermsServiceMockRecorder {
	return m.recorder
}

// CreateTerm mocks base method.
func (m *MockTermsService) CreateTerm(term *types.Terms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTerm", term)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTerm indicates an expected call of CreateTerm.
func (mr *MockTermsServiceMockRecorder) CreateTerm(term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTerm", reflect.TypeOf((*MockTermsService)(nil).CreateTerm), term)
}

// DeleteTerm mocks base method.
func (m *MockTermsService) DeleteTerm(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTerm", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTerm indicates an expected call of DeleteTerm.
func (mr *MockTermsServiceMockRecorder) DeleteTerm(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTerm", reflect.TypeOf((*MockTermsService)(nil).DeleteTerm), id)
}

// GetTerms mocks base method.
func (m *MockTermsService) GetTerms() ([]types.Terms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerms")
	ret0, _ := ret[0].([]types.Terms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerms indicates an expected call of GetTerms.
func (mr *MockTermsServiceMockRecorder) GetTerms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerms", reflect.TypeOf((*MockTermsService)(nil).GetTerms))
}

// UpdateTerm mocks base method.
func (m *MockTermsService) UpdateTerm(id string, term *types.Terms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTerm", id, term)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTerm indicates an expected call of UpdateTerm.
func (mr *MockTermsServiceMockRecorder) UpdateTerm(id, term interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTerm", reflect.TypeOf((*MockTermsService)(nil).UpdateTerm), id, term)
}
