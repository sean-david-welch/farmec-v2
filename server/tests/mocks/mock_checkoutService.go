// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/checkoutService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stripe "github.com/stripe/stripe-go/v76"
)

// MockCheckoutService is a mock of CheckoutService interface.
type MockCheckoutService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckoutServiceMockRecorder
}

// MockCheckoutServiceMockRecorder is the mock recorder for MockCheckoutService.
type MockCheckoutServiceMockRecorder struct {
	mock *MockCheckoutService
}

// NewMockCheckoutService creates a new mock instance.
func NewMockCheckoutService(ctrl *gomock.Controller) *MockCheckoutService {
	mock := &MockCheckoutService{ctrl: ctrl}
	mock.recorder = &MockCheckoutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckoutService) EXPECT() *MockCheckoutServiceMockRecorder {
	return m.recorder
}

// CreateCheckoutSession mocks base method.
func (m *MockCheckoutService) CreateCheckoutSession(id string) (*stripe.CheckoutSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckoutSession", id)
	ret0, _ := ret[0].(*stripe.CheckoutSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckoutSession indicates an expected call of CreateCheckoutSession.
func (mr *MockCheckoutServiceMockRecorder) CreateCheckoutSession(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckoutSession", reflect.TypeOf((*MockCheckoutService)(nil).CreateCheckoutSession), id)
}

// RetrieveCheckoutSession mocks base method.
func (m *MockCheckoutService) RetrieveCheckoutSession(sessionId string) (*stripe.CheckoutSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCheckoutSession", sessionId)
	ret0, _ := ret[0].(*stripe.CheckoutSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCheckoutSession indicates an expected call of RetrieveCheckoutSession.
func (mr *MockCheckoutServiceMockRecorder) RetrieveCheckoutSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCheckoutSession", reflect.TypeOf((*MockCheckoutService)(nil).RetrieveCheckoutSession), sessionId)
}
