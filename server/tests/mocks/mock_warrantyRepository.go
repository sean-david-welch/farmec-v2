// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/warrantyRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockWarrantyRepository is a mock of WarrantyRepository interface.
type MockWarrantyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWarrantyRepositoryMockRecorder
}

// MockWarrantyRepositoryMockRecorder is the mock recorder for MockWarrantyRepository.
type MockWarrantyRepositoryMockRecorder struct {
	mock *MockWarrantyRepository
}

// NewMockWarrantyRepository creates a new mock instance.
func NewMockWarrantyRepository(ctrl *gomock.Controller) *MockWarrantyRepository {
	mock := &MockWarrantyRepository{ctrl: ctrl}
	mock.recorder = &MockWarrantyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarrantyRepository) EXPECT() *MockWarrantyRepositoryMockRecorder {
	return m.recorder
}

// CreateWarranty mocks base method.
func (m *MockWarrantyRepository) CreateWarranty(warranty *types.WarrantyClaim, parts []types.PartsRequired) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarranty", warranty, parts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarranty indicates an expected call of CreateWarranty.
func (mr *MockWarrantyRepositoryMockRecorder) CreateWarranty(warranty, parts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarranty", reflect.TypeOf((*MockWarrantyRepository)(nil).CreateWarranty), warranty, parts)
}

// DeleteWarranty mocks base method.
func (m *MockWarrantyRepository) DeleteWarranty(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarranty", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarranty indicates an expected call of DeleteWarranty.
func (mr *MockWarrantyRepositoryMockRecorder) DeleteWarranty(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarranty", reflect.TypeOf((*MockWarrantyRepository)(nil).DeleteWarranty), id)
}

// GetWarranties mocks base method.
func (m *MockWarrantyRepository) GetWarranties() ([]types.DealerOwnerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarranties")
	ret0, _ := ret[0].([]types.DealerOwnerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarranties indicates an expected call of GetWarranties.
func (mr *MockWarrantyRepositoryMockRecorder) GetWarranties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarranties", reflect.TypeOf((*MockWarrantyRepository)(nil).GetWarranties))
}

// GetWarrantyById mocks base method.
func (m *MockWarrantyRepository) GetWarrantyById(id string) (*types.WarrantyClaim, []types.PartsRequired, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarrantyById", id)
	ret0, _ := ret[0].(*types.WarrantyClaim)
	ret1, _ := ret[1].([]types.PartsRequired)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWarrantyById indicates an expected call of GetWarrantyById.
func (mr *MockWarrantyRepositoryMockRecorder) GetWarrantyById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarrantyById", reflect.TypeOf((*MockWarrantyRepository)(nil).GetWarrantyById), id)
}

// UpdateWarranty mocks base method.
func (m *MockWarrantyRepository) UpdateWarranty(id string, warranty *types.WarrantyClaim, parts []types.PartsRequired) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarranty", id, warranty, parts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarranty indicates an expected call of UpdateWarranty.
func (mr *MockWarrantyRepositoryMockRecorder) UpdateWarranty(id, warranty, parts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarranty", reflect.TypeOf((*MockWarrantyRepository)(nil).UpdateWarranty), id, warranty, parts)
}
