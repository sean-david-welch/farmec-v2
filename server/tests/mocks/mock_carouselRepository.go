// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/carouselRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockCarouselRepository is a mock of CarouselRepository interface.
type MockCarouselRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarouselRepositoryMockRecorder
}

// MockCarouselRepositoryMockRecorder is the mock recorder for MockCarouselRepository.
type MockCarouselRepositoryMockRecorder struct {
	mock *MockCarouselRepository
}

// NewMockCarouselRepository creates a new mock instance.
func NewMockCarouselRepository(ctrl *gomock.Controller) *MockCarouselRepository {
	mock := &MockCarouselRepository{ctrl: ctrl}
	mock.recorder = &MockCarouselRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarouselRepository) EXPECT() *MockCarouselRepositoryMockRecorder {
	return m.recorder
}

// CreateCarousel mocks base method.
func (m *MockCarouselRepository) CreateCarousel(carousel *types.Carousel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarousel", carousel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCarousel indicates an expected call of CreateCarousel.
func (mr *MockCarouselRepositoryMockRecorder) CreateCarousel(carousel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarousel", reflect.TypeOf((*MockCarouselRepository)(nil).CreateCarousel), carousel)
}

// DeleteCarousel mocks base method.
func (m *MockCarouselRepository) DeleteCarousel(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarousel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarousel indicates an expected call of DeleteCarousel.
func (mr *MockCarouselRepositoryMockRecorder) DeleteCarousel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarousel", reflect.TypeOf((*MockCarouselRepository)(nil).DeleteCarousel), id)
}

// GetCarouselById mocks base method.
func (m *MockCarouselRepository) GetCarouselById(id string) (*types.Carousel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarouselById", id)
	ret0, _ := ret[0].(*types.Carousel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarouselById indicates an expected call of GetCarouselById.
func (mr *MockCarouselRepositoryMockRecorder) GetCarouselById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarouselById", reflect.TypeOf((*MockCarouselRepository)(nil).GetCarouselById), id)
}

// GetCarousels mocks base method.
func (m *MockCarouselRepository) GetCarousels() ([]types.Carousel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarousels")
	ret0, _ := ret[0].([]types.Carousel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarousels indicates an expected call of GetCarousels.
func (mr *MockCarouselRepositoryMockRecorder) GetCarousels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarousels", reflect.TypeOf((*MockCarouselRepository)(nil).GetCarousels))
}

// UpdateCarousel mocks base method.
func (m *MockCarouselRepository) UpdateCarousel(id string, carousel *types.Carousel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarousel", id, carousel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCarousel indicates an expected call of UpdateCarousel.
func (mr *MockCarouselRepositoryMockRecorder) UpdateCarousel(id, carousel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarousel", reflect.TypeOf((*MockCarouselRepository)(nil).UpdateCarousel), id, carousel)
}
