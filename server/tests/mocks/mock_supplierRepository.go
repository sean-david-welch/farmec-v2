// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/supplierRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockSupplierRepository is a mock of SupplierRepository interface.
type MockSupplierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierRepositoryMockRecorder
}

// MockSupplierRepositoryMockRecorder is the mock recorder for MockSupplierRepository.
type MockSupplierRepositoryMockRecorder struct {
	mock *MockSupplierRepository
}

// NewMockSupplierRepository creates a new mock instance.
func NewMockSupplierRepository(ctrl *gomock.Controller) *MockSupplierRepository {
	mock := &MockSupplierRepository{ctrl: ctrl}
	mock.recorder = &MockSupplierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplierRepository) EXPECT() *MockSupplierRepositoryMockRecorder {
	return m.recorder
}

// CreateSupplier mocks base method.
func (m *MockSupplierRepository) CreateSupplier(supplier *types.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupplier", supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupplier indicates an expected call of CreateSupplier.
func (mr *MockSupplierRepositoryMockRecorder) CreateSupplier(supplier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupplier", reflect.TypeOf((*MockSupplierRepository)(nil).CreateSupplier), supplier)
}

// DeleteSupplier mocks base method.
func (m *MockSupplierRepository) DeleteSupplier(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSupplier", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSupplier indicates an expected call of DeleteSupplier.
func (mr *MockSupplierRepositoryMockRecorder) DeleteSupplier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSupplier", reflect.TypeOf((*MockSupplierRepository)(nil).DeleteSupplier), id)
}

// GetSupplierById mocks base method.
func (m *MockSupplierRepository) GetSupplierById(id string) (*types.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierById", id)
	ret0, _ := ret[0].(*types.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierById indicates an expected call of GetSupplierById.
func (mr *MockSupplierRepositoryMockRecorder) GetSupplierById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierById", reflect.TypeOf((*MockSupplierRepository)(nil).GetSupplierById), id)
}

// GetSuppliers mocks base method.
func (m *MockSupplierRepository) GetSuppliers() ([]types.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuppliers")
	ret0, _ := ret[0].([]types.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuppliers indicates an expected call of GetSuppliers.
func (mr *MockSupplierRepositoryMockRecorder) GetSuppliers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuppliers", reflect.TypeOf((*MockSupplierRepository)(nil).GetSuppliers))
}

// UpdateSupplier mocks base method.
func (m *MockSupplierRepository) UpdateSupplier(id string, supplier *types.Supplier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSupplier", id, supplier)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSupplier indicates an expected call of UpdateSupplier.
func (mr *MockSupplierRepositoryMockRecorder) UpdateSupplier(id, supplier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSupplier", reflect.TypeOf((*MockSupplierRepository)(nil).UpdateSupplier), id, supplier)
}
