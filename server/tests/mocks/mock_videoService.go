// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/videoService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockVideoService is a mock of VideoService interface.
type MockVideoService struct {
	ctrl     *gomock.Controller
	recorder *MockVideoServiceMockRecorder
}

// MockVideoServiceMockRecorder is the mock recorder for MockVideoService.
type MockVideoServiceMockRecorder struct {
	mock *MockVideoService
}

// NewMockVideoService creates a new mock instance.
func NewMockVideoService(ctrl *gomock.Controller) *MockVideoService {
	mock := &MockVideoService{ctrl: ctrl}
	mock.recorder = &MockVideoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoService) EXPECT() *MockVideoServiceMockRecorder {
	return m.recorder
}

// CreateVideo mocks base method.
func (m *MockVideoService) CreateVideo(video *types.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideo", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVideo indicates an expected call of CreateVideo.
func (mr *MockVideoServiceMockRecorder) CreateVideo(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideo", reflect.TypeOf((*MockVideoService)(nil).CreateVideo), video)
}

// DeleteVideo mocks base method.
func (m *MockVideoService) DeleteVideo(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockVideoServiceMockRecorder) DeleteVideo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockVideoService)(nil).DeleteVideo), id)
}

// GetVideos mocks base method.
func (m *MockVideoService) GetVideos(id string) ([]types.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", id)
	ret0, _ := ret[0].([]types.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideos indicates an expected call of GetVideos.
func (mr *MockVideoServiceMockRecorder) GetVideos(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockVideoService)(nil).GetVideos), id)
}

// TransformData mocks base method.
func (m *MockVideoService) TransformData(video *types.Video) (*types.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformData", video)
	ret0, _ := ret[0].(*types.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransformData indicates an expected call of TransformData.
func (mr *MockVideoServiceMockRecorder) TransformData(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformData", reflect.TypeOf((*MockVideoService)(nil).TransformData), video)
}

// UpdateVideo mocks base method.
func (m *MockVideoService) UpdateVideo(id string, video *types.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", id, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *MockVideoServiceMockRecorder) UpdateVideo(id, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockVideoService)(nil).UpdateVideo), id, video)
}
