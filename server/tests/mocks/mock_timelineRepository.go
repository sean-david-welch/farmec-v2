// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/timelineRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockTimelineRepository is a mock of TimelineRepository interface.
type MockTimelineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineRepositoryMockRecorder
}

// MockTimelineRepositoryMockRecorder is the mock recorder for MockTimelineRepository.
type MockTimelineRepositoryMockRecorder struct {
	mock *MockTimelineRepository
}

// NewMockTimelineRepository creates a new mock instance.
func NewMockTimelineRepository(ctrl *gomock.Controller) *MockTimelineRepository {
	mock := &MockTimelineRepository{ctrl: ctrl}
	mock.recorder = &MockTimelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimelineRepository) EXPECT() *MockTimelineRepositoryMockRecorder {
	return m.recorder
}

// CreateTimeline mocks base method.
func (m *MockTimelineRepository) CreateTimeline(timeline *types.Timeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeline", timeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTimeline indicates an expected call of CreateTimeline.
func (mr *MockTimelineRepositoryMockRecorder) CreateTimeline(timeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeline", reflect.TypeOf((*MockTimelineRepository)(nil).CreateTimeline), timeline)
}

// DeleteTimeline mocks base method.
func (m *MockTimelineRepository) DeleteTimeline(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeline", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeline indicates an expected call of DeleteTimeline.
func (mr *MockTimelineRepositoryMockRecorder) DeleteTimeline(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeline", reflect.TypeOf((*MockTimelineRepository)(nil).DeleteTimeline), id)
}

// GetTimelines mocks base method.
func (m *MockTimelineRepository) GetTimelines() ([]types.Timeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimelines")
	ret0, _ := ret[0].([]types.Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimelines indicates an expected call of GetTimelines.
func (mr *MockTimelineRepositoryMockRecorder) GetTimelines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimelines", reflect.TypeOf((*MockTimelineRepository)(nil).GetTimelines))
}

// UpdateTimeline mocks base method.
func (m *MockTimelineRepository) UpdateTimeline(id string, timeline *types.Timeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeline", id, timeline)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeline indicates an expected call of UpdateTimeline.
func (mr *MockTimelineRepositoryMockRecorder) UpdateTimeline(id, timeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeline", reflect.TypeOf((*MockTimelineRepository)(nil).UpdateTimeline), id, timeline)
}
