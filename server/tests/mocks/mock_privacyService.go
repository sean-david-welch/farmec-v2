// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/privacyService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockPrivacyService is a mock of PrivacyService interface.
type MockPrivacyService struct {
	ctrl     *gomock.Controller
	recorder *MockPrivacyServiceMockRecorder
}

// MockPrivacyServiceMockRecorder is the mock recorder for MockPrivacyService.
type MockPrivacyServiceMockRecorder struct {
	mock *MockPrivacyService
}

// NewMockPrivacyService creates a new mock instance.
func NewMockPrivacyService(ctrl *gomock.Controller) *MockPrivacyService {
	mock := &MockPrivacyService{ctrl: ctrl}
	mock.recorder = &MockPrivacyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivacyService) EXPECT() *MockPrivacyServiceMockRecorder {
	return m.recorder
}

// CreatePrivacy mocks base method.
func (m *MockPrivacyService) CreatePrivacy(privacy *types.Privacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivacy", privacy)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePrivacy indicates an expected call of CreatePrivacy.
func (mr *MockPrivacyServiceMockRecorder) CreatePrivacy(privacy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivacy", reflect.TypeOf((*MockPrivacyService)(nil).CreatePrivacy), privacy)
}

// DeletePrivacy mocks base method.
func (m *MockPrivacyService) DeletePrivacy(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivacy", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivacy indicates an expected call of DeletePrivacy.
func (mr *MockPrivacyServiceMockRecorder) DeletePrivacy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivacy", reflect.TypeOf((*MockPrivacyService)(nil).DeletePrivacy), id)
}

// GetPrivacys mocks base method.
func (m *MockPrivacyService) GetPrivacys() ([]types.Privacy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivacys")
	ret0, _ := ret[0].([]types.Privacy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivacys indicates an expected call of GetPrivacys.
func (mr *MockPrivacyServiceMockRecorder) GetPrivacys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivacys", reflect.TypeOf((*MockPrivacyService)(nil).GetPrivacys))
}

// UpdatePrivacy mocks base method.
func (m *MockPrivacyService) UpdatePrivacy(id string, privacy *types.Privacy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivacy", id, privacy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrivacy indicates an expected call of UpdatePrivacy.
func (mr *MockPrivacyServiceMockRecorder) UpdatePrivacy(id, privacy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivacy", reflect.TypeOf((*MockPrivacyService)(nil).UpdatePrivacy), id, privacy)
}
