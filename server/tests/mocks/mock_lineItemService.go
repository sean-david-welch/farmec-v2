// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/lineItemService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sean-david-welch/farmec-v2/server/types"
)

// MockLineItemService is a mock of LineItemService interface.
type MockLineItemService struct {
	ctrl     *gomock.Controller
	recorder *MockLineItemServiceMockRecorder
}

// MockLineItemServiceMockRecorder is the mock recorder for MockLineItemService.
type MockLineItemServiceMockRecorder struct {
	mock *MockLineItemService
}

// NewMockLineItemService creates a new mock instance.
func NewMockLineItemService(ctrl *gomock.Controller) *MockLineItemService {
	mock := &MockLineItemService{ctrl: ctrl}
	mock.recorder = &MockLineItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineItemService) EXPECT() *MockLineItemServiceMockRecorder {
	return m.recorder
}

// CreateLineItem mocks base method.
func (m *MockLineItemService) CreateLineItem(lineItem *types.LineItem) (*types.ModelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLineItem", lineItem)
	ret0, _ := ret[0].(*types.ModelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLineItem indicates an expected call of CreateLineItem.
func (mr *MockLineItemServiceMockRecorder) CreateLineItem(lineItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLineItem", reflect.TypeOf((*MockLineItemService)(nil).CreateLineItem), lineItem)
}

// DeleteLineItem mocks base method.
func (m *MockLineItemService) DeleteLineItem(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLineItem", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLineItem indicates an expected call of DeleteLineItem.
func (mr *MockLineItemServiceMockRecorder) DeleteLineItem(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLineItem", reflect.TypeOf((*MockLineItemService)(nil).DeleteLineItem), id)
}

// GetLineItemById mocks base method.
func (m *MockLineItemService) GetLineItemById(id string) (*types.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemById", id)
	ret0, _ := ret[0].(*types.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemById indicates an expected call of GetLineItemById.
func (mr *MockLineItemServiceMockRecorder) GetLineItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemById", reflect.TypeOf((*MockLineItemService)(nil).GetLineItemById), id)
}

// GetLineItems mocks base method.
func (m *MockLineItemService) GetLineItems() ([]types.LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItems")
	ret0, _ := ret[0].([]types.LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItems indicates an expected call of GetLineItems.
func (mr *MockLineItemServiceMockRecorder) GetLineItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItems", reflect.TypeOf((*MockLineItemService)(nil).GetLineItems))
}

// UpdateLineItem mocks base method.
func (m *MockLineItemService) UpdateLineItem(id string, lineItem *types.LineItem) (*types.ModelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineItem", id, lineItem)
	ret0, _ := ret[0].(*types.ModelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLineItem indicates an expected call of UpdateLineItem.
func (mr *MockLineItemServiceMockRecorder) UpdateLineItem(id, lineItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineItem", reflect.TypeOf((*MockLineItemService)(nil).UpdateLineItem), id, lineItem)
}
